#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

#define DHTPIN 15
#define DHTTYPE DHT22

const char* ssid = "Mark";
const char* password = "11111111";
const char* mqttServer = "broker.hivemq.com";
const int mqttPort = 1883;
const char* mqttTopicTemperature = "sensor1/temp";
const char* mqttTopicHumidity = "sensor2/humi";
bool ledState = LOW; // ตัวแปรสถานะเริ่มต้นของไฟ
WiFiClient espClient;
PubSubClient client(espClient);
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(115200);
  pinMode(2, OUTPUT);
  pinMode(21, OUTPUT);
  pinMode(22, OUTPUT);
  pinMode(23, OUTPUT);
  pinMode(12, INPUT);
  pinMode(13, INPUT);
  setup_wifi();
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
  dht.begin();
  digitalWrite(21, LOW);
  digitalWrite(22, LOW);
  digitalWrite(23, LOW);

}

void loop() {
  client.loop(); 

  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  if (isnan(temperature) || isnan(humidity)) {
    Serial.println("Failed to read from DHT sensor");
    return;
  }
  if (!client.connected()) {
    reconnect();
  }
   if (digitalRead(13) == 0) {
    Serial.println("OFF SW STOP");
    ledState = LOW;           // ปิดไฟ
    digitalWrite(2, ledState);
    client.publish("color/led2", "0");
  }
  if (digitalRead(12) == 0) {
    Serial.println("ON SW1");
    ledState = HIGH;          // เปิดไฟ
    digitalWrite(2, ledState);
    client.publish("color/led2", "1");
  }
  

  //  client.publish("oak/sw01","wit");
   Serial.println("TEST ok");
   Serial.println(temperature);
  if(temperature < 25){
    digitalWrite(23, HIGH);
    digitalWrite(22, LOW);
    digitalWrite(21, LOW);
    Serial.println(temperature);
    Serial.println("G");
    client.publish("color/led1", "1");
  } else if (temperature < 30) {
    digitalWrite(23, LOW);
    digitalWrite(22, HIGH);
    digitalWrite(21, LOW);
    Serial.println(temperature);
    Serial.println("Y");
    client.publish("color/led1", "2");
  } else if (temperature >= 30) {
    digitalWrite(23, LOW);
    digitalWrite(22, LOW);
    digitalWrite(21, HIGH);
    Serial.println(temperature);
    Serial.println("R");
    client.publish("color/led1", "3");
  }
  

  

  char temperatureString[6];
  dtostrf(temperature, 5, 2, temperatureString);
  client.publish(mqttTopicTemperature, temperatureString);

  char humidityString[6];
  dtostrf(humidity, 5, 2, humidityString);
  client.publish(mqttTopicHumidity, humidityString);

  delay(2000);
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32TEST", "", "")) {
      Serial.println("mqtt connected");
      client.subscribe("master1/room1");
      Serial.println("Subscribed to master1/room1");  // เพิ่ม debug
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}
void callback(char* topic, byte* payload, unsigned int length) {
    Serial.print("MQTT: topic=");
    Serial.println(topic);
    payload[length] = 0;
    Serial.print("MQTT: payload=");
    Serial.println((char*)payload);

    if (strcmp(topic, "master1/room1") == 0) {
        Serial.println("Received master1/room1 command");  // เพิ่ม debug
        if (payload[0] == '0') {  
            Serial.println("Setting LED LOW");  // เพิ่ม debug
            ledState = LOW;
            digitalWrite(2, ledState);
            client.publish("color/led2", "0");
        }
        if (payload[0] == '1') {  
            Serial.println("Setting LED HIGH");  // เพิ่ม debug
            ledState = HIGH;
            digitalWrite(2, ledState);
            client.publish("color/led2", "1");
        }
    }
}
